/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* CSS RESET & PROJECT WIDE DEFS */
* {
    margin: 0;
    padding: 0;
    /* Do not add border/padding to total width/height of elements */
    box-sizing: border-box;
}

/* PROJECT WIDE DEFS  */
body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777777;
    padding: 30px;
}
/* END OF CSS RESET & PROJECT WIDE DEFS */

.header {
    height: 95vh;
    /* Gradient always first, can speciffy direction */
    background-image: linear-gradient(
        to right bottom,
        hsla(111, 55%, 64%, 0.8),
        rgba(39, 179, 133, 0.8)), 
         url('../img/hero.jpg');
    /* Attempts to fit image inside element */
    background-size: cover;
    /* Ensures top of img remains at top of el on resize */
    background-position: top;
    /* Work clockwise from top-left; X Y values; use Clippy to generate shapes for this property */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    position: relative;
}

.logo-box {
    /* References parent element whose position is relative */
    position: absolute;
    top: 40px;
    left: 40px;
}

.logo {
    /* Specify height and width will be figured out by browser */
    height: 35px;
    animation: moveInLeft 1s ease-in;
}


.header-text-box {
    /* In relation to parent element; 
    pushes outside left & top of container to the center of parent*/
    position: absolute;
    top: 40%;
    left: 50%;

    /* In relation to element itself; 
    slides container back a little (left and top) 
    to remain responsive and perfectly center */
    transform: translate(-50%, -50%);
    text-align: center;
}

.heading-primary {
    color: #ffffff;
    text-transform: uppercase;
    /* Prevent shaking on elements that animate inside this element */
    backface-visibility: hidden;
    margin-bottom: 60px;
}

.heading-primary-main {
    /* block takes up 100% width and inserts a line break before and after */
    display: block;
    font-size: 60px;
    font-weight: 700;
    letter-spacing: 35px;
    animation: moveInLeft 1s ease-out;
}
.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 400;
    letter-spacing: 17.4px;
    /* Two props, name and duration */
    animation-name: moveInRight;
    animation-duration: 1s;
    animation-timing-function: ease-out;
}

/* Animation Definitions */

@keyframes moveInLeft {
    /* Browsers are optimized for opacity and transform */
    /* Start */
    0% {
        opacity: 0;
        transform: translateX(-100px);
    }
    80% {
        transform: translateX(10px);
    }
    /* During Animation */
    /* Finish */
    100% {
        opacity: 1;
        transform: translateX(0)
    }
}
@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(100px)
    }
    80% {
        transform: translateX(-10px);
    }
    100% {
        opacity: 1;
        transform: translateX(0)
    }
}

@keyframes moveInBottom{
    0% {
        opacity: 0;
        transform: translateY(50px);
    }
    80% {
        transform: translateY(-10px);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

/* pseudo class : is a state that allows us to style based on a condition */
/* We use link chained to visited to override browser predefined link styles */
.btn:link,
/* Visited means user has used the link*/
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    border-radius: 100px;
    display: inline-block;
    transition: all .3s;
    position: relative;
}

.btn-animated {
    animation: moveInBottom 1s ease-out;
    /* Apply animation style before it starts (style @ 0%) */
    animation-fill-mode: backwards;
}

.btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0,0,0,.20);
}

/* When clicked */
.btn:active {
    transform: translateY(-1px);
    box-shadow: 0 5px 10px rgba(0,0,0,.20);
}

.btn-white {
    background-color: #ffffff;
    color: #777777;
}

/* Acts like a virtual element; used for effects; treated like a child of the button*/
/* Pseudo element :: */
.btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 100px;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s;
}

.btn-white::after {
    background-color: #ffffff;
}

.btn:hover::after {
    transform: scale(1.5);
    opacity: 0;
}